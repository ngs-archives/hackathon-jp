var URL_TWITTER_HOME = 'http://twitter.com/';var URL_TWITTER_API_USER_TIMELINE = "http://twitter.com/statuses/user_timeline.json?count=1";var URL_TWITTER_API_HOME = 'http://twitter.com/statuses/home_timeline.json?';var URL_TWITTER_API_HOME_OPTIONS = '&count=200';var pollInterval = 1000 * 60;	// 10 secondsvar requestTimeout = 1000 * 5;	// 5 seconds/** CODE FROM OFFICIAL SAMPLE CODE: GMAIL CHECKER **/var animationFrames = 36;var animationSpeed = 10; // msvar canvas;var canvasContext;var loggedInImage;var rotation = 0;var unreadCount = -1;var loadingAnimation = new LoadingAnimation();/** END OF QUOTE **//** MODIFIED CODE FROM GMAIL CHECKER **//*chrome.tabs.onUpdated.addListener(function(tabId, changeInfo) {	if (changeInfo.url && changeInfo.url.indexOf(URL_TWITTER_HOME) == 0) {		console.log("saw twitter! updating...");		getTimelineCount(function(count) {			updateUnreadCount(count);		});	}});*/function goToTimeline() {	chrome.tabs.create({url: URL_TWITTER_HOME});}function init() {	canvas = document.getElementById('canvas');	loggedInImage = document.getElementById('logged_in');	canvasContext = canvas.getContext('2d');	// chrome.browserAction.setIcon({path: "images/logo_disabled.png"});	loadingAnimation.start();	startRequest();}function scheduleRequest() {	window.setTimeout(startRequest, pollInterval);}// ajax stufffunction startRequest() {	getMyStatus(function() {return true;}, function() {return false;});	getTimelineCount(		function(count) {			loadingAnimation.stop();			updateUnreadCount(count);			scheduleRequest();		},		function() {			loadingAnimation.stop();			showLoggedOut();			scheduleRequest();		}	);}/**** STUFF FOR TIMELINE ****/function getMyStatus(onSuccess, onError) {	var xhr = new XMLHttpRequest();	var abortTimerId = window.setTimeout(function() {		xhr.abort();		onError();	}, requestTimeout);	function handleSuccess() {		window.clearTimeout(abortTimerId);		if (onSuccess)			onSuccess();	}	function handleError() {		window.clearTimeout(abortTimerId);		if (onError)			onError();	}	try {		console.log("request..");		xhr.onreadystatechange = function() {			console.log("readystate: " + xhr.readyState);			if (xhr.readyState == 4) {				if (xhr.responseText) {					data = eval("(" + xhr.responseText + ")");					if (data.length > 0) {/*						sessionStorage.user_name = unhtmlentities(data[0].user.name);						sessionStorage.user_screen_name = unhtmlentities(data[0].user.screen_name);						sessionStorage.user_text = unhtmlentities(data[0].text);						sessionStorage.user_profile_image_url = data[0].user.profile_image_url;*/						localStorage.user_name = unhtmlentities(data[0].user.name);						localStorage.user_screen_name = unhtmlentities(data[0].user.screen_name);						localStorage.user_text = unhtmlentities(data[0].text);						localStorage.user_created_at = data[0].created_at;						localStorage.user_profile_image_url = data[0].user.profile_image_url;						handleSuccess();					} else {						handleError();					}				} else {					console.log("No responseText!");				}			}		}		xhr.onerror = function(error) {			console.log("error");			console.log(error);			handleError();		}		// NEED valid id, password		var userid = localStorage.userid;		var password = localStorage.password;		var basicAuth = makeBasicAuthKey(userid, password);		xhr.open("GET", URL_TWITTER_API_USER_TIMELINE, true);		xhr.setRequestHeader("Authorization", basicAuth);		xhr.send(null);	} catch(e) {		console.log("ex: " + e);		console.error("exception: " + e);		handleError();	}}// WARNING: STUBfunction unhtmlentities(str) {	return str;}function getTimelineCount(onSuccess, onError) {	getTimeline(onSuccess, onError);}function getTimeline(onSuccess, onError) {	var since_id = '';	var xhr = new XMLHttpRequest();	var abortTimerId = window.setTimeout(function() {		xhr.abort();		onError();	}, requestTimeout);	function handleSuccess(count) {		window.clearTimeout(abortTimerId);		if (onSuccess)			onSuccess(count);	}	function handleError() {		window.clearTimeout(abortTimerId);		if (onError)			onError();	}	try {		console.log("request..");		xhr.onreadystatechange = function(){			console.log("readystate: " + xhr.readyState);			if (xhr.readyState == 4) {				console.log("responseText: " + xhr.responseText.substring(0, 200) + "...");				if (xhr.responseText) {					data = eval("(" + xhr.responseText + ")");					if (data.length > 0) {						var fullCountSet = data.length;						since_id = data[0].id;						localStorage.since_id = since_id;						localStorage.cached_json = xhr.responseText;/*						var updated = xmlDoc.getElementsByTagName('updated')[0].firstChild.data.toString();						URL_TWITTER_API_HOME_OPTIONS = '&count=200';						if (updated) {							URL_TWITTER_API_HOME_OPTIONS += '&since='+updated;						}*/						handleSuccess(fullCountSet.toString());					} else {						handleError();						showLoggedOut();					}				} else {					console.log("No responseText!");					console.log("responseText:" + xhr.responseText);				}			}		}		xhr.onerror = function(error) {			console.log("error");			console.log(error);			handleError();		}		pollInterval = ((localStorage.interval > 0) ? localStorage.interval : 60) * 1000;		// NEED valid id, password		var userid = localStorage.userid;		var password = localStorage.password;		var basicAuth = makeBasicAuthKey(userid, password);		since_id = localStorage.since_id;		if (since_id) {			URL_TWITTER_API_HOME_OPTIONS = '&since_id=' + since_id;		}		xhr.open("GET", URL_TWITTER_API_HOME+URL_TWITTER_API_HOME_OPTIONS, true);		xhr.setRequestHeader("Authorization", basicAuth);		xhr.send(null);	} catch(e) {		console.log("ex: " + e);		console.error("exception: " + e);		handleError();	}}function gmailNSResolver(prefix) {	if(prefix == 'gmail') {		return 'http://purl.org/atom/ns#';	}}function updateUnreadCount(count) {	if (unreadCount != count) {		unreadCount = count;		animateFlip();	}}function LoadingAnimation() {	this.timerId_ = 0;	this.maxCount_ = 8;	// Total number of states in animation	this.current_ = 0;	// Current state	this.maxDot_ = 4;	// Max number of dots in animation}LoadingAnimation.prototype.paintFrame = function() {	var text = "";	for (var i = 0; i < this.maxDot_; i++) {		text += (i == this.current_) ? "." : " ";	}	if (this.current_ >= this.maxDot_)		text += "";	chrome.browserAction.setBadgeText({text:text});	this.current_++;	if (this.current_ == this.maxCount_)		this.current_ = 0;}LoadingAnimation.prototype.start = function() {	if (this.timerId_)		return;	chrome.browserAction.setBadgeBackgroundColor({color:[0, 208, 24, 128]});	var self = this;	this.timerId_ = window.setInterval(function() {		self.paintFrame();	}, 100);}LoadingAnimation.prototype.stop = function() {	if (!this.timerId_)		return;	window.clearInterval(this.timerId_);	this.timerId_ = 0;}function ease(x) {	return (1-Math.sin(Math.PI/2+x*Math.PI))/2;}function animateFlip() {	rotation += 1/animationFrames;	drawIconAtRotation();	if (rotation <= 1) {		setTimeout("animateFlip()", animationSpeed);	} else {		rotation = 0;		drawIconAtRotation();		chrome.browserAction.setIcon({path: "images/logo.png"});		chrome.browserAction.setBadgeBackgroundColor({color:[208, 0, 24, 255]});		chrome.browserAction.setBadgeText({			text: unreadCount != "0" ? unreadCount : ""		});	}}function showLoggedOut() {	unreadCount = -1;	chrome.browserAction.setIcon({path:"images/logo_disabled.png"});	chrome.browserAction.setBadgeBackgroundColor({color:[190, 190, 190, 230]});	chrome.browserAction.setBadgeText({text:"?"});}function drawIconAtRotation() {	canvasContext.save();	canvasContext.clearRect(0, 0, canvas.width, canvas.height);	canvasContext.translate(			Math.ceil(canvas.width/2),			Math.ceil(canvas.height/2));	canvasContext.rotate(2*Math.PI*ease(rotation));	canvasContext.drawImage(loggedInImage,			-Math.ceil(canvas.width/2),			-Math.ceil(canvas.height/2));	canvasContext.restore();	chrome.browserAction.setIcon({imageData:canvasContext.getImageData(0, 0,			canvas.width,canvas.height)});}/*// Called when the user clicks on the browser action.chrome.browserAction.onClicked.addListener(function(tab) {	goToTimeline();});*/function makeBasicAuthKey(id, password) {if (id != '' && password != '') {basic = base64encode(id + ':' + password);return "Basic " + basic;}return '';}