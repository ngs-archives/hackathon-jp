<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs
            title="List Friends Example"
            description="desc">
        <Require feature="opensocial-0.8" />
    </ModulePrefs>
    <Content type="html" view="home,profile,canvas"><![CDATA[<script type="text/javascript">
    if (typeof console == 'undefined') {
    	this.console = {
    		debug:alert
    	};
    }
      /**
       * Request the OWNER and OWNER's friends.
       */
      function request() {
      try{
		var env = opensocial.getEnvironment();
		
		var html = '';
		/*
		var allFields = [];
		for(field in opensocial.Person.Field)
		{
			html += field + '<br />';
			allFields.push(field);
		}
		*/
		
		var html = '';
		html += 'domain is :' + env.getDomain() + '<br />';
		var objectType = opensocial.Environment.ObjectType.PERSON;
		html += 'objectType:' + 'PERSON'; 
		for (fieldName in opensocial.Person.Field)
		{
			html += 'fieldName ' + fieldName + ' is supported? : ' 
				+ env.supportsField(objectType, fieldName) + '<br />';
		}
		
        document.getElementById('message').innerHTML += html;


      
        var idspec = opensocial.newIdSpec({ "userId" : "OWNER", "groupId" : "FRIENDS" });
        var req = opensocial.newDataRequest();
        var params = {}; 
		params[opensocial.DataRequest.PeopleRequestFields.PROFILE_DETAILS] 
			= [
				opensocial.Person.Field.PROFILE_URL
			]; 
        req.add(req.newFetchPersonRequest(opensocial.IdSpec.PersonId.OWNER, params), "get_owner");
        req.add(req.newFetchPeopleRequest(idspec), "get_friends");
        req.send(response);
      }catch(e){
        alert(e);
      }
      	return;


      /**
       * Parses the response and generates html to list the names of the owner and
       * his or her friends.
       *
       * @param {Object} dataResponse Friend information that was requested.
       */
      function response(dataResponse) {
        var owner = dataResponse.get('get_owner').getData();
        /* @var owner Map< PersonId, Map<String, Object>> */
        var friends = dataResponse.get('get_friends').getData();
        /* @var friends Collection<Person> */ 
        
        var html = '';
        html += 'domain: ' + domain + '<br />';
        html += owner.getDisplayName() + 'の友達は' + friends.size() + '人です';
        html += ':<br><ul>';
        friends.each(function(person) {
          console.debug(person);
          /* @var person Person */
          html += '<li>' + person.getDisplayName() + '<br />';
          html += 'id:' + person.getId();
          html += 'isOwner:' + person.isOwner();
          html += 'isViewer:' + person.isViewer();
          html += '</li>';
//          person.getField(key, opt_params);
        });
        html += '</ul>';
        
        document.getElementById('message').innerHTML += html;
      }
      
      } // request

      // Execute the request function when the application is finished loading.
      gadgets.util.registerOnLoadHandler(request);
    </script>
    <div id="message" style="overflow:scroll;"> </div>]]></Content>
</Module>